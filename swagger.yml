swagger: "2.0"
info:
  description: "This is a swagger file that goes with the Truck manager server"
  version: "1.0.0"
  title: "Swagger Truck Manager"
  contact:
    email: "yesica.acha@jalasoft.com"
host: "192.168.1.14:5000"
basePath: "/api/v1"
tags:
- name: "trucks"
  description: "Operations about trucks"
- name: "drivers"
  description: "Operations about driver"
schemes:
- "http"
paths:
  /trucks:
    get:
      tags:
      - "trucks"
      summary: "Lists all the trucks"
      description: ""
      operationId: "get_trucks"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Truck"
    post:
      tags:
      - "trucks"
      summary: "Adds a new truck to the truck manager"
      description: ""
      operationId: "save_truck"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Truck object that needs to be added to the Truck manager"
        required: true
        schema:
          $ref: "#/definitions/Truck"
      responses:
        "405":
          description: "Invalid input"
  /trucks/{truck_id}:
    get:
      tags:
      - "trucks"
      summary: "Gets a truck by ID"
      description: "Returns a single truck"
      operationId: "get_truck_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "truck_id"
        in: "path"
        description: "ID of truck to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Truck"
        "404":
          description: "The truck doesn't seem to exist. Please enter another truck id."
    delete:
      tags:
      - "trucks"
      summary: "Deletes a truck"
      description: ""
      operationId: "delete_truck_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "truck_id"
        in: "path"
        description: "Truck ID to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Truck"
        "404":
          description: "The truck was not deleted because it doesn't seem to exist. Please enter a valid truck ID."
  /drivers:
    get:
      tags:
      - "drivers"
      summary: "Lists all the drivers"
      description: ""
      operationId: "get_drivers"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Driver"
    post:
      tags:
      - "drivers"
      summary: "Adds a new driver to the truck manager"
      description: ""
      operationId: "save_driver"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Driver object that needs to be added to the Truck manager"
        required: true
        schema:
          $ref: "#/definitions/Driver"
      responses:
        "405":
          description: "Invalid input"
  /drivers/{driver_id}:
    get:
      tags:
      - "drivers"
      summary: "Gets a truck by ID"
      description: "Returns a single driver"
      operationId: "get_driver_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "driver_id"
        in: "path"
        description: "ID of driver to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Driver"
        "404":
          description: "The driver doesn't seem to exist. Please enter another driver ID."
    delete:
      tags:
      - "drivers"
      summary: "Deletes a driver"
      description: ""
      operationId: "delete_driver_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "driver_id"
        in: "path"
        description: "Driver ID to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Driver"
        "404":
          description: "The driver was not deleted because it doesn't seem to exist. Please enter a valid driver ID."
  /drivers/{driver_id_or_name}/truck:
    get:
      tags:
      - "drivers"
      summary: "Gets a truck information by driver name or ID"
      description: ""
      operationId: "get_truck_by_driver"
      produces:
      - "application/json"
      parameters:
      - name: "driver_id_or_name"
        in: "path"
        description: "Driver name or ID to get Truck information"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Truck"
        "404":
          description: "The driver was not deleted because it doesn't seem to exist. Please enter a valid driver name or ID."
definitions:
  Driver:
    type: "object"
    required:
    - "id"
    - "first_name"
    - "last_name"
    - "license_number"
    - "phone"
    - "truck_id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 0
      first_name:
        type: "string"
        example: "Santiago"
      last_name:
        type: "string"
        example: "Cabrera"
      license_number:
        type: "string"
        example: "123456"
      phone:
        type: "string"
        example: "77912345"
      truck_id:
        type: "integer"
        format: "int64"
        example: 2
    xml:
      name: "User"
  Truck:
    type: "object"
    required:
    - "id"
    - "brand"
    - "color"
    - "model"
    - "plate"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      brand:
        type: "string"
        example: "Chevrolet"
      color:
        type: "string"
        example: "red"
      model:
        type: "string"
        example: "Chevy Kodiak"
      plate:
        type: "string"
        example: "5318XZA"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"